[{"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/index.js":"1","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/App.js":"2","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/routes.js":"3","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/Header/index.js":"4","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/Home/index.js":"5","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/Error/index.js":"6","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/Login/index.js":"7","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/CreateUserForm/index.js":"8","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/EditUserForm/index.js":"9","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/firebaseConnection.js":"10"},{"size":483,"mtime":1607704911321,"results":"11","hashOfConfig":"12"},{"size":221,"mtime":1607704911317,"results":"13","hashOfConfig":"12"},{"size":899,"mtime":1607704911321,"results":"14","hashOfConfig":"12"},{"size":2362,"mtime":1607704911321,"results":"15","hashOfConfig":"12"},{"size":626,"mtime":1607704911321,"results":"16","hashOfConfig":"12"},{"size":272,"mtime":1607704911321,"results":"17","hashOfConfig":"12"},{"size":6047,"mtime":1607704911325,"results":"18","hashOfConfig":"12"},{"size":8450,"mtime":1607704911321,"results":"19","hashOfConfig":"12"},{"size":8034,"mtime":1607704911321,"results":"20","hashOfConfig":"12"},{"size":569,"mtime":1607704911321,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1x3m50k",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/index.js",[],["44","45"],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/App.js",[],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/routes.js",[],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/Header/index.js",[],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/Home/index.js",[],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/Error/index.js",[],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/Login/index.js",["46","47"],"import React, {useState, useEffect} from 'react';\nimport { Link , Redirect} from \"react-router-dom\";\nimport { Container, Row, Card, Form, Button,  Spinner, Alert} from 'react-bootstrap';\nimport validate from 'validate.js';\nimport firebase from '../../firebaseConnection';\n\n\n//Variáveis do formulário\nconst initialFormState = {\n  isValid: false,\n  loading: false,\n  values: {\n    email: '',\n    password: ''\n  },\n  errors: {\n    email: [],\n    password: [],\n  },\n  touched: {\n    email: false,\n    password: false,\n  }\n};\n\n//Estado inicial do feedback do usuário\nconst initialFeedback = {\n  open: false,\n  message: '',\n  type: '' \n};\n\n//Esquema para validações no validate.js\nconst schema = {\n  email: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n    email: { message: () => 'Insira um email válido' }\n  },\n  password: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n  }\n};\n\n\nconst Login = () => {\n  //Garantindo que a página apenas seja por alguém deslogado do sistema\n  firebase.auth().signOut();\n\n\n  const [feedback, setFeedback] = useState(initialFeedback);\n  const [formState, setFormState] = useState(initialFormState);\n  const [redirect, setRedirect] = useState(false);\n\n\n  //Observador\n  firebase.auth().onAuthStateChanged((user) => {\n    if(user) \n      setRedirect(true)\n    else \n      setRedirect(false)\n  }); \n\n  useEffect(() => {\n    //Verificando campos do formulário a cada atualização do formulário\n    const errors = validate(formState.values, schema, { fullMessages: false });\n\n    setFormState(formState => ({\n      ...formState,\n      isValid: errors ? false: true,\n      errors: errors ? errors : {}\n    })) \n    \n  }, [formState.values]);\n  \n  const handleFieldChange = (e, field, value) => {\n    e.persist && e.persist();\n    setFormState({\n      ...formState,\n      values: {\n        ...formState.values,\n        [field]: value\n      },\n      touched: {\n        ...formState.touched,\n        [field]: true\n      }\n    });    \n  };  \n\n  const hasError = (field) => Boolean(formState.errors[field] && formState.touched[field]);\n\n  const handleSubmit = (e) => {\n    if(formState.isValid){\n      firebase.auth().signInWithEmailAndPassword(formState.values.email, formState.values.password)\n      .catch((error) =>{\n        if(error.code === 'auth/wrong-password'){\n          setFeedback({\n            open: true,\n            type: 'warning',\n            message: \"Senha incorreta!\"\n          })\n        }else if(error.code === 'auth/invalid-email'){\n          setFeedback({\n            open: true,\n            type: 'warning',\n            message: \"Email inválido!\"\n          })\n        }else if(error.code === 'auth/user-not-found'){\n          setFeedback({\n            open: true,\n            type: 'warning',\n            message: \"Usuário não encontrado!\"\n          })\n        }else{\n          setFeedback({\n            open: true,\n            type: 'warning',\n            message: 'Erro: ' + error.code\n          })\n        }\n      })\n      \n      setFeedback({\n        open: true,\n        type: 'success',\n        message: \"Logado com sucesso!\"\n      })\n    }else{\n      setFeedback({\n        open: true,\n        type: 'warning',\n        message: \"Não foi possível entrar no sistema.\"\n      })\n    }    \n    \n    e.preventDefault();\n  };\n\n  console.log()\n  //if (redirect) return <Redirect to=\"/\" />\n\n\n  return (    \n    <Container style={{padding:10}}>\n      {\n        formState.loading ? \n        (<Row style={{marginTop:250}} className=\"justify-content-center\" float=\"center\">\n              <Spinner  animation=\"border\" variant=\"warning\" size=\"xs\" role=\"status\"/>\n          </Row>) : \n        (<Card bg=\"dark\" text=\"white\" body>\n          <Card.Header className=\"text-warning\"  border=\"warning\" as=\"h4\">Login</Card.Header>\n          \n          <Card.Body>\n            <br/>\n            <Form noValidate>\n  \n              <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Email</Form.Label>\n                <Form.Control \n                  isInvalid={hasError('email') ? true : false}\n                  type=\"email\" \n                  placeholder=\"texto@exemplo.com\" \n                  value={formState.values.email}\n                  onChange={e => handleFieldChange(e, 'email', e.target.value)}\n                />\n                {/* Mensagem de erro, caso exista */}\n                <Form.Text className=\"text-warning\">\n                  {hasError('email') ? formState.errors.email[0] : null}\n                </Form.Text>\n              </Form.Group>\n\n\n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Senha</Form.Label>\n                <Form.Control \n                  isInvalid={hasError('password') ? true : false}\n                  type=\"password\" \n                  placeholder=\"Senha\" \n                  value={formState.values.password}\n                  onChange={e => handleFieldChange(e, 'password', e.target.value)}\n                />\n                <Form.Text className=\"text-warning\">\n                  {hasError('password') ? formState.errors.password[0] : null}\n                </Form.Text>                \n              </Form.Group>\n\n              {/* Botao Submit e feedback para o usuário utilizando o controleador \"feedback.open\"*/}\n              {feedback.open ? (\n                <Alert variant={feedback.type} onClose={() => setFeedback({...feedback, open: false})              } dismissible>\n                  <Alert.Heading>{(feedback.type === 'success') ? ('Sucesso!') : ('Erro!')}</Alert.Heading>\n                  <p>{feedback.message}</p>\n                  {(feedback.type === 'warning') ? <Link to={'/user/create'}>Deseja criar uma conta?</Link> : null}\n                </Alert>\n              ) :\n              <Button type=\"submit\" variant = \"warning\" onClick={(e) => handleSubmit(e)}>Entrar</Button>\n              }\n            </Form> \n          </Card.Body>\n        </Card>)\n      }      \n    </Container>\n  );\n}\n\nexport default Login;\n","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/CreateUserForm/index.js",[],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/views/EditUserForm/index.js",[],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts-frontend/src/firebaseConnection.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":17,"nodeType":"54","messageId":"55","endLine":2,"endColumn":25},{"ruleId":"52","severity":1,"message":"56","line":52,"column":10,"nodeType":"54","messageId":"55","endLine":52,"endColumn":18},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'redirect' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]